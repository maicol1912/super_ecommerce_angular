import { createAction, props } from '@ngrx/store';
export enum AuthActionTypes{
  Login = '[Auth] Inicio de sesión',
  LoginSuccess = '[Auth] Inicio de sesión exitoso',
  LoginFailure = '[Auth] Inicio de sesión fallido',
  Logout = '[Auth] Cierre de sesión',
  ChangePassword = '[Auth] Cambiar contraseña',
  ChangePasswordSuccess = '[Auth] Cambio de contraseña exitoso',
  ChangePasswordFailure = '[Auth] Cambio de contraseña fallido',
  verifyEmail = '[Auth] Verificar email',
  verifyEmailSuccess = '[Auth] Verificar email exitoso',
  verifyEmailFailure = '[Auth] Verificar email fallido',
  FindUser = '[Auth] Buscando usuario',
  FindUserSuccess = '[Auth] Busqueda de usuario exitosa',
  FindUserFailure = '[Auth] Busqueda de usuario fallida',
  ValidateToken = '[Auth] Validar token',
  ValidateTokenSuccess = '[Auth] Validar token exitoso',
  ValidateTokenFailure = '[Auth] Validar token fallido',
  endOfAuthEvents = '[Auth] Finalizacion de eventos',
}

export const AuthActions = {
  LoginAction: createAction(AuthActionTypes.Login, props<{ payload: any }>()),
  LoginSuccessAction: createAction(AuthActionTypes.LoginSuccess, props<{ payload: any }>()),
  LoginFailureAction: createAction(AuthActionTypes.LoginFailure, props<{ payload: any }>()),
  LogoutAction: createAction(AuthActionTypes.Logout),
  ChangePasswordAction: createAction(AuthActionTypes.ChangePassword, props<{ payload: any }>()),
  ChangePasswordSuccessAction: createAction(AuthActionTypes.ChangePasswordSuccess, props<{ payload: any }>()),
  ChangePasswordFailureAction: createAction(AuthActionTypes.ChangePasswordFailure, props<{ payload: any }>()),
  VerifyEmailAction: createAction(AuthActionTypes.verifyEmail, props<{ payload: any }>()),
  VerifyEmailSuccessAction: createAction(AuthActionTypes.verifyEmailSuccess, props<{ payload: any }>()),
  VerifyEmailFailureAction: createAction(AuthActionTypes.verifyEmailFailure, props<{ payload: any }>()),
  FindUserAction: createAction(AuthActionTypes.FindUser, props<{ payload: any }>()),
  FindUserSuccessAction: createAction(AuthActionTypes.FindUserSuccess, props<{ payload: any }>()),
  FindUserFailureAction: createAction(AuthActionTypes.FindUserFailure, props<{ payload: any }>()),
  ValidateTokenAction: createAction(AuthActionTypes.ValidateToken, props<{ payload: any }>()),
  ValidateTokenSuccessAction: createAction(AuthActionTypes.ValidateTokenSuccess, props<{ payload: any }>()),
  ValidateTokenFailureAction: createAction(AuthActionTypes.ValidateTokenFailure, props<{ payload: any }>()),
  endOfAuthEvents: createAction(AuthActionTypes.endOfAuthEvents, props<{ payload: any }>()),
};
